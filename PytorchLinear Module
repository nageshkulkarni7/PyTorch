{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled6.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "authorship_tag": "ABX9TyOvOFj8CbDHGW5hq3s+ZtlS",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/nageshkulkarni7/PyTorch/blob/main/PytorchLinear%20Module\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "RDYjkdXsvn95"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Zu4heaVpJTNb"
      },
      "source": [
        "import torch\r\n",
        "import torch.nn as nn\r\n",
        "import numpy as np"
      ],
      "execution_count": 1,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ws5lXSrgmZ96",
        "outputId": "ea3a4021-6671-4b94-a53f-b1e62e1e81e3"
      },
      "source": [
        "x=torch.tensor([2,4,6,8],dtype=torch.float32)\r\n",
        "y=torch.tensor([4,8,12,16],dtype=torch.float32)\r\n",
        "x\r\n",
        "y"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "tensor([ 4.,  8., 12., 16.])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 15
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "zOJnW4aVoJKK"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "eRGXCboEnwJK"
      },
      "source": [
        "#Create Model\r\n",
        "#Construct loss and optimizer\r\n",
        "#training loop -- forward pass , backward pass , update weights\r\n",
        "model=nn.Linear()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "rr9cYeMTpGxj"
      },
      "source": [
        "loss=nn.MSELoss()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "pzCAWxwuptxD"
      },
      "source": [
        "learning_rate=0.01"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "UeJJn5jLpPgt"
      },
      "source": [
        "optimizer=torch.optim.SGD([w],lr=learning_rate)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "upcQuQx2p1_B",
        "outputId": "4607ec7a-3f9b-4ba9-8b1c-bd61190e4cdf"
      },
      "source": [
        "for epoch in range(10):\r\n",
        "\r\n",
        "  #Predcited\r\n",
        "  y_expected=forward(x)\r\n",
        "  print (\"Epoch \", epoch +y_expected)\r\n",
        "\r\n",
        "  #calculate loss\r\n",
        "  l=loss(y_expected,y)\r\n",
        "\r\n",
        "  #backward pass\r\n",
        "  l.backward()\r\n",
        "\r\n",
        "  #update gradients\r\n",
        "  optimizer.step()\r\n",
        "\r\n",
        "  #Stop tracking gradients\r\n",
        "  optimizer.zero_grad()\r\n",
        "\r\n",
        "\r\n",
        "print (\"after alogorith output\", forward(20))\r\n",
        "\r\n",
        "\r\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Epoch  tensor([ 3.9996,  7.9992, 11.9987, 15.9983], grad_fn=<AddBackward0>)\n",
            "Epoch  tensor([ 4.9998,  8.9997, 12.9995, 16.9993], grad_fn=<AddBackward0>)\n",
            "Epoch  tensor([ 5.9999,  9.9999, 13.9998, 17.9997], grad_fn=<AddBackward0>)\n",
            "Epoch  tensor([ 7.0000, 10.9999, 14.9999, 18.9999], grad_fn=<AddBackward0>)\n",
            "Epoch  tensor([ 8.0000, 12.0000, 16.0000, 20.0000], grad_fn=<AddBackward0>)\n",
            "Epoch  tensor([ 9.0000, 13.0000, 17.0000, 21.0000], grad_fn=<AddBackward0>)\n",
            "Epoch  tensor([10.0000, 14.0000, 18.0000, 22.0000], grad_fn=<AddBackward0>)\n",
            "Epoch  tensor([11.0000, 15.0000, 19.0000, 23.0000], grad_fn=<AddBackward0>)\n",
            "Epoch  tensor([12., 16., 20., 24.], grad_fn=<AddBackward0>)\n",
            "Epoch  tensor([13., 17., 21., 25.], grad_fn=<AddBackward0>)\n",
            "after alogorith output tensor(40., grad_fn=<MulBackward0>)\n"
          ],
          "name": "stdout"
        }
      ]
    }
  ]
}